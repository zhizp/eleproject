<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 自动扫描 -->  
    <context:component-scan base-package="com.ele" ><!-- com.newhero.urbanconstruction.** -->
    <!-- 不扫描@Controller注解的类-->
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>	
    
     <!-- 引入配置文件 -->  
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  
  	
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
     destroy-method="close">  
        <property name="driverClass" value="${driver}" />  
        <property name="jdbcUrl" value="${url}" />  
        <property name="user" value="${user}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialPoolSize" value="${initialPoolSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxPoolSize" value="${maxPoolSize}"></property>  
        <!-- 连接池最小数量 -->  
        <property name="minPoolSize" value="${minPoolSize}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdleTime" value="${maxIdleTime}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxStatements" value="${maxStatements}"></property>  
    </bean>  
    
     <!-- spring和MyBatis整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/ele/project/**/mapping/*.xml"></property>  
        
        <!-- 分页相关配置 -->
        <property name="plugins">
            <array>
                <!--PageHelper-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <value>
                            dialect = com.github.pagehelper.PageHelper
                        </value>
                    </property>
                </bean>
            </array>
        </property> 
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 动态代理实现 不用写dao的实现类-->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.ele.project.**.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
    <!--事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 
    	在这里我有一个疑惑,原文博客这里并没有配置事务注解，我测试了向数据库添加数据，也能成功，(HIbernate是需要配置事务的)
    	不知道是不是，service实现类，bean 使用了注解的方式,还是其他什么的
    	这里我把事务注解加上	
    	spring、mybatis 配置方式 可以看这篇博客：http://blog.csdn.net/qh_java/article/details/51601139	
    -->
    
</beans>
