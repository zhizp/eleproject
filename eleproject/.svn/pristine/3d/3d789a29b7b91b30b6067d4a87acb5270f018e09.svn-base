package com.newhero.urbanconstruction.codetablemaintain.investmenttype.controller;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newhero.urbanconstruction.codetablemaintain.investmenttype.pojo.InvestmentTypeDTO;
import com.newhero.urbanconstruction.codetablemaintain.investmenttype.service.InvestmentTypeService;
import com.newhero.urbanconstruction.sysmanager.user.pojo.UserDTO;
import com.newhero.urbanconstruction.util.BaseQueryVo;
import com.newhero.urbanconstruction.util.Constant;
import com.newhero.urbanconstruction.util.Pagination;
import com.newhero.urbanconstruction.util.ToolsUtil;

/**
 * 投资分类模块
 * @author mqr
 *
 */
@Controller
@RequestMapping("/investmentType")
public class InvestmentTypeController {
	@Resource
	private InvestmentTypeService investmentTypeService;
	
	
	@RequestMapping(value = "/investTypeList")
    public String investmentTypeList(String pn,String rowsPerPage, String keyword, HttpServletResponse response,HttpServletRequest request, Model model){
		if(ToolsUtil.isEmpty(pn)){
			pn = Constant.DEAULT_START_PAGE_NUM ;
		}
		if(ToolsUtil.isEmpty(rowsPerPage)){
			rowsPerPage = Constant.DEFAULT_PAGE_SIZE ;
		}
		if(ToolsUtil.isEmpty(pn)) keyword = null;
		// 分页信息
		Pagination page = new Pagination();
		//翻页、参数
		BaseQueryVo dto = new BaseQueryVo();
		
		dto.setKeyword(keyword);
		dto.setStartRow((Integer.parseInt(pn) - 1) * Integer.parseInt(rowsPerPage));
		dto.setPageSize(Integer.parseInt(rowsPerPage));
				
		int rowsCount = investmentTypeService.getInvestmentTypeCountByKeyword(dto) ;
		
		page.setRowsCount(rowsCount);
		page.setRowsPerPage(Integer.parseInt(rowsPerPage));
		page.setCurrentPage(Integer.parseInt(pn));
		page.setUrl(request.getContextPath()+"/investmentType/investTypeList?rowsPerPage="+rowsPerPage);
		
		List<InvestmentTypeDTO> investmentTypeList = investmentTypeService.getInvestmentTypeListByKeyword(dto);
		if(investmentTypeList.isEmpty()&&Integer.parseInt(pn)>1) {
			dto.setStartRow((Integer.parseInt(pn) - 2) * Integer.parseInt(rowsPerPage));
			investmentTypeList = investmentTypeService.getInvestmentTypeListByKeyword(dto);
			page.setCurrentPage(Integer.parseInt(pn)-1);
		}
		
		
		
		model.addAttribute("investmentTypeList", investmentTypeList);
		
		model.addAttribute("keyword",keyword);
		model.addAttribute("page",page);
		return "investmenttype/investtypelist";
	}
	/**
	 * ajax根据用户ID查询用户信息
	 * @param id
	 * @param model
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/getInvestmentTypeById", method = RequestMethod.POST)
	public InvestmentTypeDTO getInvestmentTypeById(@RequestParam(value = "id") String id){
		if(ToolsUtil.isEmpty(id)) return null;
		return investmentTypeService.getInvestmentTypeById(Integer.valueOf(id));
	}
	
	/**
	 * ajax添加或修改数据
	 * @param user
	 * @param response
	 */
	@ResponseBody
	@RequestMapping(value="/saveInvest", method = RequestMethod.POST)
	public Map<String, String> saveInvest(@ModelAttribute("invest")InvestmentTypeDTO invest,HttpServletResponse response,HttpServletRequest request){
//		System.out.println("进来了"+user.getName());
		UserDTO sessUser = (UserDTO)request.getSession().getAttribute("USER_SESSION");
		
		invest.setOperatorid(sessUser.getId());
		int rs;
		if(invest.getId()!=null && invest.getId()>0){
			
			rs = investmentTypeService.updateInvestmentTypeById(invest);
		}else{
//			String pwd = user.getPassword();
//			invest.setPassword(MD5.getMD5(pwd.getBytes()));
			rs = investmentTypeService.insertInvestmentType(invest);
		}

		Map<String, String> result = new HashMap<String, String>();
		result.put("result", rs+"");
		return result;
	}
	
	/**
	 * ajax根据ID置为删除状态
	 * @param id
	 * @param model
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value="/delInvests", method = RequestMethod.POST)
	public String delInvests(@RequestParam(value = "id") String id,HttpServletResponse response,HttpServletRequest request) {
		UserDTO sessUser = (UserDTO)request.getSession().getAttribute("USER_SESSION");
		int rs = 0;
		if(ToolsUtil.isNotEmpty(id)){
			String[] ids = id.split(",");
			rs = investmentTypeService.delInvestmentTypeIds(ids, sessUser.getId());
		}
		return Integer.toString(rs);
	}
	
	@ResponseBody
	@RequestMapping("/checkInvest")
	public String checkInvest(@RequestParam(value="id") String id) {
		int rs=investmentTypeService.checkInvest(id);
		return Integer.toString(rs);
	}
	@RequestMapping(value = "/exportInvestmentType")
	public void exportInvestmentType(HttpServletResponse response, HttpServletRequest request) throws Exception{
		BaseQueryVo dto = new BaseQueryVo();
		dto.setIsall(1);
		List<InvestmentTypeDTO> list = investmentTypeService.getInvestmentTypeListByKeyword(dto);

		//设置输出头
    	response.setContentType("application/vnd.ms-excel;charset=UTF-8");
    	String filename = "投资分类表.xls";// 设置下载时客户端Excel的名称
    	//设置HTTP响应的头
    	String t = request.getHeader("User-Agent");
		if (t.indexOf("Firefox") > 0) {
			response.setHeader("Content-disposition", "attachment;filename="
					+ new String(filename.getBytes("gb2312"), "ISO8859-1"));
		} else {
			response.setHeader("Content-disposition", "attachment;filename="
					+ URLEncoder.encode(filename, "UTF-8"));
		}
		
		ServletOutputStream stream = response.getOutputStream();
		
		HSSFWorkbook work = new HSSFWorkbook();
		
		HSSFSheet sheet = work.createSheet("投资分类表");
		
		HSSFRow row = sheet.createRow(0);
		
		HSSFCell cell1 = row.createCell(0);
		cell1.setCellValue("序号");
		
		HSSFCell cell2 = row.createCell(1);
		cell2.setCellValue("编号");
		
		HSSFCell cell3 = row.createCell(2);
		cell3.setCellValue("投资分类");
		
		HSSFCell cell4 = row.createCell(3);
		cell4.setCellValue("备注");
		
		for(int i = 0; i < list.size(); i++){
			InvestmentTypeDTO type = list.get(i);
			HSSFRow row1 = sheet.createRow(i + 1);
			
			row1.createCell(0).setCellValue(i + 1);
			row1.createCell(1).setCellValue(type.getId());
			row1.createCell(2).setCellValue(type.getInvestmenttype());
			row1.createCell(3).setCellValue(type.getRemark());
		}
		
		work.write(stream);
		
		stream.flush();
		stream.close();
	}
	
}
