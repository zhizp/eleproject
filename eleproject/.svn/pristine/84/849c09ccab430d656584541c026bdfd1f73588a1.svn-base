package com.newhero.urbanconstruction.codetablemaintain.archivesmanage.controller;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newhero.urbanconstruction.codetablemaintain.archivesmanage.pojo.ArchivesManageDTO;
import com.newhero.urbanconstruction.codetablemaintain.archivesmanage.service.ArchivesMnageService;
import com.newhero.urbanconstruction.codetablemaintain.archivestype.pojo.ArchivesType;
import com.newhero.urbanconstruction.codetablemaintain.projectname.pojo.ProjectNameDTO;
import com.newhero.urbanconstruction.codetablemaintain.projectyear.pojo.ProjectYearDTO;
import com.newhero.urbanconstruction.sysmanager.user.pojo.UserDTO;
import com.newhero.urbanconstruction.sysmanager.user.service.SysUserService;
import com.newhero.urbanconstruction.util.BaseQueryVo;
import com.newhero.urbanconstruction.util.Constant;
import com.newhero.urbanconstruction.util.Pagination;
import com.newhero.urbanconstruction.util.ToolsUtil;

import net.sf.json.JSONObject;

@Controller
@RequestMapping(value = "/archivesManageController")
public class ArchivesManageController {
	@Resource 
	private ArchivesMnageService archivesMnageService;
	@Resource 
	private SysUserService sysUserService;
	
	public ArchivesMnageService getArchivesMnageService() {
		return archivesMnageService;
	}
	public SysUserService getSysUserService() {
		return sysUserService;
	}



	@RequestMapping(value = "/selectArchivesManage")
	public String selectArchivesManage(String pn,String rowsPerPage, String keyword,HttpServletResponse response,HttpServletRequest request,Model model)throws IOException {
		if(ToolsUtil.isEmpty(pn)){
			pn = Constant.DEAULT_START_PAGE_NUM ;
		}
		if(ToolsUtil.isEmpty(rowsPerPage)){
			rowsPerPage = Constant.DEFAULT_PAGE_SIZE ;
		}
		if(ToolsUtil.isEmpty(pn)) keyword = null;
		// 分页信息
		Pagination page = new Pagination();
		//翻页、参数
		BaseQueryVo dto = new BaseQueryVo();

		dto.setKeyword(keyword);
		dto.setStartRow((Integer.parseInt(pn) - 1) * Integer.parseInt(rowsPerPage));
		dto.setPageSize(Integer.parseInt(rowsPerPage));
		int rowsCount =archivesMnageService.selectCountArchivesManageByKeyword(dto);
		page.setRowsCount(rowsCount);
		page.setRowsPerPage(Integer.parseInt(rowsPerPage));
		page.setCurrentPage(Integer.parseInt(pn));
		page.setUrl(request.getContextPath()+"/archivesManageController/selectArchivesManage?rowsPerPage="+rowsPerPage);
		List<ArchivesManageDTO> allArchivesManageDTOList = archivesMnageService.getAllArchivesManageDTO(dto);
		if(allArchivesManageDTOList.isEmpty()&&Integer.parseInt(pn)>1) {
			dto.setStartRow((Integer.parseInt(pn) - 2) * Integer.parseInt(rowsPerPage));
			allArchivesManageDTOList = archivesMnageService.getAllArchivesManageDTO(dto);
			page.setCurrentPage(Integer.parseInt(pn)-1);
		}
		List<ArchivesType> archivesTypeList = archivesMnageService.selectArchivesType();
		List<ProjectNameDTO> projectNameList = archivesMnageService.selectProjectNames();
		List<ProjectYearDTO> projectYearList = archivesMnageService.selectProjectYears();
		model.addAttribute("allArchivesManageDTOList", allArchivesManageDTOList);
        model.addAttribute("keyword",keyword);
		model.addAttribute("page",page);
		model.addAttribute("archivesTypeList",archivesTypeList);
		model.addAttribute("projectNameList",projectNameList);
		model.addAttribute("projectYearList",projectYearList);
		return "dm_CodeTable/ArchivesManage";
	}
	
	@RequestMapping(value = "/saveArchivesManage")
    @ResponseBody
	public void saveArchivesManage(HttpServletResponse response,HttpServletRequest request,ArchivesManageDTO archivesManageDTO )  throws IOException{
		UserDTO sessUser = (UserDTO)request.getSession().getAttribute("USER_SESSION");
		archivesManageDTO.setOperatorid(sessUser.getId());
		SimpleDateFormat sim=new SimpleDateFormat("yyyy-MM-dd");
		Date date=new Date();
		String now=sim.format(date);
		archivesManageDTO.setOperationtime(now);
		archivesMnageService.insertArchivesManage(archivesManageDTO);
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
	@RequestMapping(value = "/selectArchivesById")
    @ResponseBody
	public ArchivesManageDTO  selectArchivesById(String id) {
		return archivesMnageService.selectArchivesManageById(Integer.parseInt(id));
	}
	
	@RequestMapping(value = "/updateArchivesManage")
    @ResponseBody
	public void updateArchivesManage(HttpServletResponse response,HttpServletRequest request,ArchivesManageDTO archivesManageDTO )  throws IOException {
		UserDTO sessUser = (UserDTO)request.getSession().getAttribute("USER_SESSION");
		archivesManageDTO.setOperatorid(sessUser.getId());
		SimpleDateFormat sim=new SimpleDateFormat("yyyy-MM-dd");
		Date date=new Date();
	    String now=sim.format(date);
		archivesManageDTO.setOperationtime(now);
		archivesMnageService.updateArchivesManage(archivesManageDTO);
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
	@RequestMapping(value = "/deleteArchivesManage")
    @ResponseBody
	public void deleteArchivesManage(HttpServletResponse response,HttpServletRequest request,ArchivesManageDTO archivesManageDTO )  throws IOException {
		UserDTO sessUser = (UserDTO)request.getSession().getAttribute("USER_SESSION");
		archivesManageDTO.setOperatorid(sessUser.getId());
		archivesMnageService.deleteArchivesManage(archivesManageDTO);
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
	
	
	
	
	
}
