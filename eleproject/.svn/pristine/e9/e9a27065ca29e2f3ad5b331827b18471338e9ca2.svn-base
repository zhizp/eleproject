package com.newhero.urbanconstruction.codetablemaintain.allocationsaccount.controller;

import java.io.IOException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newhero.urbanconstruction.codetablemaintain.allocationsaccount.pojo.AllocationsAccountDTO;
import com.newhero.urbanconstruction.codetablemaintain.allocationsaccount.service.AllocationsAccountService;
import com.newhero.urbanconstruction.common.SupportAction;
import com.newhero.urbanconstruction.sysmanager.user.pojo.UserDTO;
import com.newhero.urbanconstruction.util.BaseQueryVo;
import com.newhero.urbanconstruction.util.Constant;
import com.newhero.urbanconstruction.util.Pagination;
import com.newhero.urbanconstruction.util.ToolsUtil;

import net.sf.json.JSONObject;
@Controller
@RequestMapping(value = "/allocationsAccountController")
public class AllocationsAccountController extends SupportAction{
	@Resource
	private AllocationsAccountService allocationsAccountService;

	public AllocationsAccountService getAllocationsAccountService() {
		return allocationsAccountService;
	}

	@RequestMapping(value = "/selectAllocationsAccounts")
	public String selectAllocationsAccounts(String pn,String rowsPerPage, String keyword,HttpServletResponse response,HttpServletRequest request,Model model) throws IOException{
		if(ToolsUtil.isEmpty(pn)){
			pn = Constant.DEAULT_START_PAGE_NUM ;
		}
		if(ToolsUtil.isEmpty(rowsPerPage)){
			rowsPerPage = Constant.DEFAULT_PAGE_SIZE ;
		}
		if(ToolsUtil.isEmpty(pn)) keyword = null;
		// 分页信息
		Pagination page = new Pagination();
		//翻页、参数
		BaseQueryVo dto = new BaseQueryVo();

		//dto.setKeyword(keyword);
		
		if(keyword != null && !keyword.equals("")) {
			dto.setKeyword(java.net.URLDecoder.decode(keyword, "UTF-8"));
		} else {
			dto.setKeyword(keyword);
		}
		
		dto.setStartRow((Integer.parseInt(pn) - 1) * Integer.parseInt(rowsPerPage));
		dto.setPageSize(Integer.parseInt(rowsPerPage));
		int rowsCount=allocationsAccountService.selectAllocationsAccountCountByKeyword(dto);
		page.setRowsCount(rowsCount);
		page.setRowsPerPage(Integer.parseInt(rowsPerPage));
		page.setCurrentPage(Integer.parseInt(pn));
		
		if(keyword != null && !keyword.equals("")) {
			page.setUrl(request.getContextPath()+"/allocationsAccountController/selectAllocationsAccounts?rowsPerPage="+rowsPerPage
					+ "&keyword=" + java.net.URLEncoder.encode(keyword, "UTF-8"));
		} else {
			page.setUrl(request.getContextPath()+"/allocationsAccountController/selectAllocationsAccounts?rowsPerPage="+rowsPerPage);
		}
		
		List<AllocationsAccountDTO> allocationsAccountList = allocationsAccountService.selectAllocationsAccounts(dto);
		if(allocationsAccountList.isEmpty()&&Integer.parseInt(pn)>1) {
			dto.setStartRow((Integer.parseInt(pn) - 2) * Integer.parseInt(rowsPerPage));
			allocationsAccountList = allocationsAccountService.selectAllocationsAccounts(dto);
			page.setCurrentPage(Integer.parseInt(pn)-1);
		}
		
		model.addAttribute("allocationsAccountList", allocationsAccountList);
		model.addAttribute("keyword",keyword);
		model.addAttribute("page",page);
		return "dm_CodeTable/GrantAccount";
	}

	@RequestMapping(value = "/deleteAllocationsAccount")
	@ResponseBody
	public void deleteAllocationsAccount(HttpServletResponse response,HttpServletRequest request,String id) throws IOException{
		UserDTO user=(UserDTO)this.getUser(request, response);
		AllocationsAccountDTO allocationsAccountDTO=new AllocationsAccountDTO();
		allocationsAccountDTO.setOperatorid(user.getId());
		if(ToolsUtil.isNotEmpty(id)){
			String[] ids = id.split(",");
			for(String cid:ids) {
				allocationsAccountDTO.setId(Integer.parseInt(cid));
				allocationsAccountService.deleteAllocationsAccountCount(allocationsAccountDTO);
			}
		}
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}

	@RequestMapping(value = "/getOutData")
	public void getOutData(HttpServletResponse response,HttpServletRequest request) throws Exception {
		BaseQueryVo dto = new BaseQueryVo();
		dto.setIsall(1);
		List<AllocationsAccountDTO> AllocationsAccountCountList = allocationsAccountService.selectAllocationsAccounts(dto);
		//设置输出头
		response.setContentType("application/vnd.ms-excel;charset=UTF-8");
		String filename = "拨款账户信息表.xls";// 设置下载时客户端Excel的名称
		//设置HTTP响应的头
		String t = request.getHeader("User-Agent");
		if (t.indexOf("Firefox") > 0) {
			response.setHeader("Content-disposition", "attachment;filename="
					+ new String(filename.getBytes("gb2312"), "ISO8859-1"));
		} else {
			response.setHeader("Content-disposition", "attachment;filename="
					+ URLEncoder.encode(filename, "UTF-8"));
		}
		ServletOutputStream stream = response.getOutputStream();
		//创建工作薄
		HSSFWorkbook workbook = new HSSFWorkbook();
		//创建工作标签页(sheet)
		HSSFSheet sheet = workbook.createSheet("拨款账户表");
		//创建表头
		HSSFRow row = sheet.createRow(0);

		HSSFCell cell = row.createCell(0);
		cell.setCellValue("序号");

		HSSFCell cell2 = row.createCell(1);
		cell2.setCellValue("编号");


		HSSFCell cell3 = row.createCell(2);
		cell3.setCellValue("账户名");


		HSSFCell cell4 = row.createCell(3);
		cell4.setCellValue("账户信息");

		HSSFCell cell5 = row.createCell(4);
		cell5.setCellValue("备注");
		for(int i = 0;i<AllocationsAccountCountList.size();i++) {
			Map map = (Map) AllocationsAccountCountList.get(i); 
			HSSFRow newrow = sheet.createRow(i+1);
			newrow.createCell(0).setCellValue(i+1);
			newrow.createCell(1).setCellValue(map.get("id").toString());
			newrow.createCell(2).setCellValue(map.get("accountName").toString());
			newrow.createCell(3).setCellValue(map.get("accountshortname").toString());
			newrow.createCell(4).setCellValue(map.get("remark").toString());
		}
		workbook.write(stream);
		stream.close();
	}

	@ResponseBody
	@RequestMapping(value = "/selectAllocationsAccountById")
	public AllocationsAccountDTO selectAllocationsAccountById(@RequestParam(value = "id") String id,Model model) throws IOException{
		AllocationsAccountDTO allocationsAccountDTO = allocationsAccountService.selectAllocationsAccountById(Integer.parseInt(id));
		return allocationsAccountDTO;
	}

	@RequestMapping(value = "/updateAllocationsAccount")
	@ResponseBody
	public void updateAllocationsAccount(HttpServletResponse response,HttpServletRequest request,AllocationsAccountDTO allocationsAccountDTO) throws IOException{
		UserDTO user=(UserDTO)this.getUser(request, response);
		allocationsAccountDTO.setOperatorid(user.getId());
		allocationsAccountService.updateAllocationsAccount(allocationsAccountDTO);
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);

	}
	
	
	@RequestMapping(value = "/saveAllocationsAccount")
	@ResponseBody
	public void saveAllocationsAccount(HttpServletResponse response,HttpServletRequest request,AllocationsAccountDTO allocationsAccountDTO) throws IOException{
		UserDTO user=(UserDTO)this.getUser(request, response);
		allocationsAccountDTO.setOperatorid(user.getId());
		allocationsAccountService.saveAllocationsAccount(allocationsAccountDTO);
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
}
