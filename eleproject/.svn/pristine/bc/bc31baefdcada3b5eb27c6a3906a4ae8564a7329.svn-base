package com.newhero.urbanconstruction.codetablemaintain.costtype.controller;

import java.io.IOException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newhero.urbanconstruction.codetablemaintain.constructionunit.pojo.ConstructionunitDTO;
import com.newhero.urbanconstruction.codetablemaintain.costtype.pojo.CostTypeDTO;
import com.newhero.urbanconstruction.codetablemaintain.costtype.service.CostTypeService;
import com.newhero.urbanconstruction.codetablemaintain.projectname.pojo.ProjectNameDTO;
import com.newhero.urbanconstruction.codetablemaintain.projectyear.pojo.ProjectYearDTO;
import com.newhero.urbanconstruction.common.SupportAction;
import com.newhero.urbanconstruction.sysmanager.user.pojo.UserDTO;
import com.newhero.urbanconstruction.util.BaseQueryVo;
import com.newhero.urbanconstruction.util.Constant;
import com.newhero.urbanconstruction.util.Pagination;
import com.newhero.urbanconstruction.util.ToolsUtil;

import net.sf.json.JSONObject;	

@Controller
@RequestMapping(value = "/costTypeController")
public class CostTypeController extends SupportAction{
	@Resource 
	private CostTypeService costTypeService;	

	public CostTypeService getCostTypeService() {
		return costTypeService;	
	}

	/**
     */
    @RequestMapping(value = "/toCostType")
    public String toCostType(){
        return  "dm_CodeTable/CostCategory";
    }

    @RequestMapping(value = "/selectCostTypes")
    public String selectCostTypes(String pn,String rowsPerPage, String keyword,
    		String projectName, String querySelect,
    		HttpServletResponse response, HttpServletRequest request,Model model) throws IOException{
    	if(ToolsUtil.isEmpty(pn)){
			pn = Constant.DEAULT_START_PAGE_NUM ;
		}
		if(ToolsUtil.isEmpty(rowsPerPage)){
			rowsPerPage = Constant.DEFAULT_PAGE_SIZE ;
		}
		if(ToolsUtil.isEmpty(pn)) keyword = null;
		// 分页信息
		Pagination page = new Pagination();
		//翻页、参数
		BaseQueryVo dto = new BaseQueryVo();
		
//		dto.setKeyword(keyword);
		
		if(keyword != null && !keyword.equals("")) {
			dto.setKeyword(java.net.URLDecoder.decode(keyword, "UTF-8"));
		} else {
			dto.setKeyword(keyword);
		}
		
		dto.setStartRow((Integer.parseInt(pn) - 1) * Integer.parseInt(rowsPerPage));
		dto.setPageSize(Integer.parseInt(rowsPerPage));
		
		//新增按照项目名称进行费用类别的查询
		dto.setQuerySelect(querySelect);
		System.out.println(dto.getQuerySelect());
		if(projectName != null && !projectName.equals("")) {
			dto.setProjectName(java.net.URLDecoder.decode(projectName, "UTF-8")); 
		}
		
		int rowsCount = costTypeService.selectCostTypeCountByKeyword(dto) ;
		
		page.setRowsCount(rowsCount);
		page.setRowsPerPage(Integer.parseInt(rowsPerPage));
		page.setCurrentPage(Integer.parseInt(pn));
		if(keyword != null && !keyword.equals("")) {
			if(querySelect != null && !querySelect.equals("")) {
				page.setUrl(request.getContextPath()+"/costTypeController/selectCostTypes?rowsPerPage=" + rowsPerPage
						+ "&keyword=" + java.net.URLEncoder.encode(keyword, "UTF-8") + "&querySelect=" + querySelect);
			} else {
				page.setUrl(request.getContextPath()+"/costTypeController/selectCostTypes?rowsPerPage=" + rowsPerPage
						+ "&keyword=" + java.net.URLEncoder.encode(keyword, "UTF-8"));
			}
		} else {
			page.setUrl(request.getContextPath()+"/costTypeController/selectCostTypes?rowsPerPage=" + rowsPerPage
					);
		}
		
		
    	List<CostTypeDTO> costTypeList=costTypeService.selectCostTypes(dto);
    	if(costTypeList.isEmpty()&&Integer.parseInt(pn)>1) {
    		dto.setStartRow((Integer.parseInt(pn) - 2) * Integer.parseInt(rowsPerPage));
    		costTypeList=costTypeService.selectCostTypes(dto);
    		page.setCurrentPage(Integer.parseInt(pn)-1);
    	}
    	
    	
    	List<ProjectYearDTO> projectYearList=costTypeService.selectProjectYears();
    	List<ConstructionunitDTO> constructionsList=costTypeService.selectconstructions();
    	List<ProjectNameDTO> projectNamesList=costTypeService.selectProjectNames();
        model.addAttribute("costTypeList", costTypeList);
        model.addAttribute("projectYearList", projectYearList);
        model.addAttribute("constructionsList", constructionsList);
        model.addAttribute("projectNamesList", projectNamesList);
        model.addAttribute("keyword",keyword);
		model.addAttribute("page",page);
        return  "dm_CodeTable/CostCategory";
    }
	
    /**
     * 
     * @param user
     * @param model
     * @param session
     * @return
     * @throws IOException 
     */
    @RequestMapping(value = "/saveCostType")
    @ResponseBody
    public void saveCostType(HttpServletResponse response,HttpServletRequest request,CostTypeDTO costTypeDTO) throws IOException{
    	UserDTO user=(UserDTO)this.getUser(request, response);
    	costTypeDTO.setOperatorId(user.getId());
    	costTypeService.saveCostType(costTypeDTO);
    	Map<String, Object> rt = new HashMap<String, Object>();
    	rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
    }
    
    /**
     * @param user
     * @param model
     * @param session
     * @return
     * @throws IOException 
     */
    @RequestMapping(value = "/updateCostType")
    @ResponseBody
    public void updateCostType(HttpServletResponse response,HttpServletRequest request,CostTypeDTO costTypeDTO) throws IOException{
    	UserDTO user=(UserDTO)this.getUser(request, response);
    	costTypeDTO.setOperatorId(user.getId());
    	costTypeService.updateCostType(costTypeDTO);
    	Map<String, Object> rt = new HashMap<String, Object>();
    	rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
    }
    
    /**
     * @param user
     * @param model
     * @param session
     * @return
     * @throws IOException 
     */
    @RequestMapping(value = "/deleteCostType")
    @ResponseBody
    public void deleteCostType(HttpServletResponse response,HttpServletRequest request,String id) throws IOException{
    	UserDTO user=(UserDTO)this.getUser(request, response);
    	CostTypeDTO costTypeDTO=new CostTypeDTO();
    	costTypeDTO.setOperatorId(user.getId());
    	Map<String, Object> rt = new HashMap<String, Object>();
    	if(ToolsUtil.isNotEmpty(id)){
			String[] ids = id.split(",");
			for(String cid:ids) {
				costTypeDTO.setId(Integer.valueOf(cid));
				int i=costTypeService.selectCountSegmentByCosttypeId(Integer.valueOf(cid));
				if(i>0) {
					rt.put("del", true);
					break;
				}
				else {
					costTypeService.deleteCostType(costTypeDTO);
				}
			}
		}
    	
    	rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
    }
    
   
    @RequestMapping(value = "/selectCostTypeByName")
    public String selectCostTypeByName(@RequestParam("costType") String costType,Model model) throws IOException{
    	List<CostTypeDTO> costTypeList=new ArrayList<CostTypeDTO>();
    	if(null !=costType) {
    		costTypeList=costTypeService.selectCostTypeByName(costType);
    	}
    	model.addAttribute("costTypeList", costTypeList);
    	return  "dm_CodeTable/CostCategory";
    }
    
    @ResponseBody
    @RequestMapping(value = "/selectCostTypeById")
    public CostTypeDTO selectCostTypeById(@RequestParam(value = "id") String id,Model model) throws IOException{
    	CostTypeDTO costTypeDTO=costTypeService.getCostTypeId(Integer.parseInt(id));
    	return costTypeDTO;
    }
    
    @RequestMapping(value = "/getOutData")
    public void getOutData(HttpServletResponse response,HttpServletRequest request) throws Exception {
    	BaseQueryVo dto = new BaseQueryVo();
	    dto.setIsall(1);
	    List<CostTypeDTO> costTypeList = costTypeService.selectCostTypes(dto);
	    response.setContentType("application/vnd.ms-excel;charset=UTF-8");
    	String filename = "费用类别信息表.xls";// 设置下载时客户端Excel的名称
    	//设置HTTP响应的头
    	String t = request.getHeader("User-Agent");
		if (t.indexOf("Firefox") > 0) {
			response.setHeader("Content-disposition", "attachment;filename="
					+ new String(filename.getBytes("gb2312"), "ISO8859-1"));
		} else {
			response.setHeader("Content-disposition", "attachment;filename="
					+ URLEncoder.encode(filename, "UTF-8"));
		}

    	ServletOutputStream stream = response.getOutputStream();

    	//创建工作薄
    	HSSFWorkbook workbook = new HSSFWorkbook();
    	//创建工作标签页(sheet)
    	HSSFSheet sheet = workbook.createSheet("费用类别信息表");

    	//创建表头
    	HSSFRow row = sheet.createRow(0);

    	HSSFCell cell = row.createCell(0);
    	cell.setCellValue("序号");

    	HSSFCell cell2 = row.createCell(1);
    	cell2.setCellValue("费用类别");


    	HSSFCell cell3 = row.createCell(2);
    	cell3.setCellValue("备注");

    	for(int i = 0;i<costTypeList.size();i++) {
    		CostTypeDTO costTypeDTO = costTypeList.get(i);
    		HSSFRow newrow = sheet.createRow(i+1);
        	newrow.createCell(0).setCellValue(i+1);
        	newrow.createCell(1).setCellValue(costTypeDTO.getCostType());
        	newrow.createCell(2).setCellValue(costTypeDTO.getRemark());
    	}
    	workbook.write(stream);

    	stream.close();
    }
}