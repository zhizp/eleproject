package com.newhero.urbanconstruction.codetablemaintain.projectname.controller;

import java.io.IOException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newhero.urbanconstruction.codetablemaintain.constructionunit.pojo.ConstructionunitDTO;
import com.newhero.urbanconstruction.codetablemaintain.investmenttype.pojo.InvestmentTypeDTO;
import com.newhero.urbanconstruction.codetablemaintain.projectname.pojo.ProjectNameDTO;
import com.newhero.urbanconstruction.codetablemaintain.projectname.service.ProjectNameService;
import com.newhero.urbanconstruction.codetablemaintain.projectyear.pojo.ProjectYearDTO;
import com.newhero.urbanconstruction.common.SupportAction;
import com.newhero.urbanconstruction.sysmanager.user.pojo.UserDTO;
import com.newhero.urbanconstruction.util.BaseQueryVo;
import com.newhero.urbanconstruction.util.Constant;
import com.newhero.urbanconstruction.util.Pagination;
import com.newhero.urbanconstruction.util.ToolsUtil;

import net.sf.json.JSONObject;	

@Controller
@RequestMapping(value = "/projectNameController")
public class ProjectNameController extends SupportAction{
	@Resource 
	private ProjectNameService projectNameService;	

	public ProjectNameService getProjectNameService() {
		return projectNameService;	
	}

	/**
     */
    @RequestMapping(value = "/toProjectName")
    public String toProjectName(){
        return  "dm_CodeTable/ProjectName";
    }

    @RequestMapping(value = "/selectProjectNames")
    public String selectProjectNames(String pn,String rowsPerPage, String keyword,HttpServletResponse response,HttpServletRequest request,Model model) throws IOException{
    	if(ToolsUtil.isEmpty(pn)){
			pn = Constant.DEAULT_START_PAGE_NUM ;
		}
		if(ToolsUtil.isEmpty(rowsPerPage)){
			rowsPerPage = Constant.DEFAULT_PAGE_SIZE ;
		}
		if(ToolsUtil.isEmpty(pn)) keyword = null;
		
		// 分页信息
		Pagination page = new Pagination();
		//翻页、参数
		BaseQueryVo dto = new BaseQueryVo();
		
		//原有keyword设置
//		dto.setKeyword(keyword);
		String rtkeyword=null;
		if(ToolsUtil.isEmpty(keyword)){
			dto.setKeyword(null);
		} else {
			dto.setKeyword(URLDecoder.decode(keyword, "UTF-8"));
			rtkeyword=dto.getKeyword();
		}
		
		dto.setStartRow((Integer.parseInt(pn) - 1) * Integer.parseInt(rowsPerPage));
		dto.setPageSize(Integer.parseInt(rowsPerPage));
		int rowsCount = projectNameService.selectProjectNameCountByKeyword(dto) ;
		
		page.setRowsCount(rowsCount);
		page.setRowsPerPage(Integer.parseInt(rowsPerPage));
		page.setCurrentPage(Integer.parseInt(pn));
		if(keyword != null && !keyword.equals("")) {
			page.setUrl(request.getContextPath()+"/projectNameController/selectProjectNames?rowsPerPage=" + rowsPerPage
					+ "&keyword=" + java.net.URLEncoder.encode(keyword, "UTF-8"));
		}
				
    	List<ProjectNameDTO> projectNameList=projectNameService.selectProjectNames(dto);
    	if(projectNameList.isEmpty()&&Integer.parseInt(pn)>1) {
    		dto.setStartRow((Integer.parseInt(pn) - 2) * Integer.parseInt(rowsPerPage));
    		projectNameList=projectNameService.selectProjectNames(dto);
    		page.setCurrentPage(Integer.parseInt(pn)-1);
    	}
    	
    	
    	
    	List<ProjectYearDTO> projectYearList=projectNameService.selectProjectYears();
    	List<InvestmentTypeDTO> investmentsList=projectNameService.selectInvestments();
    	List<ConstructionunitDTO> constructionsList=projectNameService.selectconstructions();
        model.addAttribute("projectNameList", projectNameList);
        model.addAttribute("projectYearList", projectYearList);
        model.addAttribute("InvestmentsList", investmentsList);
        model.addAttribute("constructionsList", constructionsList);
        model.addAttribute("keyword",rtkeyword);
		model.addAttribute("page",page);
        return  "dm_CodeTable/ProjectName";
    }
	
    /**
     * 
     * @param user
     * @param model
     * @param session
     * @return
     * @throws IOException 
     */
    @RequestMapping(value = "/saveProjectName")
    @ResponseBody
    public void saveProjectName(HttpServletResponse response,HttpServletRequest request,ProjectNameDTO projectNameDTO) throws IOException{
    	UserDTO user=(UserDTO)this.getUser(request, response);
    	projectNameDTO.setOperatorid(user.getId());
    	projectNameService.saveProjectName(projectNameDTO);
    	Map<String, Object> rt = new HashMap<String, Object>();
    	rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
    }
    
    /**
     * @param user
     * @param model
     * @param session
     * @return
     * @throws IOException 
     */
    @RequestMapping(value = "/updateProjectName")
    @ResponseBody
    public void updateProjectName(HttpServletResponse response,HttpServletRequest request,ProjectNameDTO projectNameDTO) throws IOException{
    	UserDTO user=(UserDTO)this.getUser(request, response);
    	projectNameDTO.setOperatorid(user.getId());
    	projectNameService.updateProjectName(projectNameDTO);
    	Map<String, Object> rt = new HashMap<String, Object>();
    	rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
    }
    
    /**
     * @param user
     * @param model
     * @param session
     * @return
     * @throws IOException 
     */
    @RequestMapping(value = "/deleteProjectName")
    @ResponseBody
    public void deleteProjectName(HttpServletResponse response,HttpServletRequest request,String id) throws IOException{
    	UserDTO user=(UserDTO)this.getUser(request, response);
    	ProjectNameDTO projectNameDTO=new ProjectNameDTO();
    	projectNameDTO.setOperatorid(user.getId());
    	Map<String, Object> rt = new HashMap<String, Object>();
    	if(ToolsUtil.isNotEmpty(id)){
			String[] ids = id.split(",");
			for(String cid:ids) {
				projectNameDTO.setId(Integer.valueOf(cid));
				int i=projectNameService.selectProjectNameCountFromCostType(Integer.valueOf(cid));
				if(i>0) {
					rt.put("del", true);
					break;
				}
				else{
					projectNameService.deleteProjectName(projectNameDTO);
				}
			}
		}
    	
    	rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
    }
    
   
    @RequestMapping(value = "/selectProjectNameByName")
    public String selectProjectNameByName(@RequestParam("projectname") String projectname,Model model) throws IOException{
    	List<ProjectNameDTO> projectNameList=new ArrayList<ProjectNameDTO>();
    	if(null !=projectname) {
    		projectNameList=projectNameService.selectProjectNameByName(projectname);
    	}
    	model.addAttribute("projectNameList", projectNameList);
    	return  "dm_CodeTable/ProjectName";
    }
    
    @ResponseBody
    @RequestMapping(value = "/selectProjectNameById")
    public ProjectNameDTO selectProjectNameById(@RequestParam(value = "id") String id,Model model) throws IOException{
    	ProjectNameDTO projectNameDTO=projectNameService.getProjectNameId(Integer.parseInt(id));
    	return projectNameDTO;
    }
    
    
	@RequestMapping(value = "/getOutData")
    public void getOutData(HttpServletResponse response,HttpServletRequest request) throws Exception {
    	BaseQueryVo dto = new BaseQueryVo();
    	dto.setIsall(1);
    	List<ProjectNameDTO> projectNameList = projectNameService.selectProjectNames(dto);
    	//设置输出头
    	response.setContentType("application/vnd.ms-excel;charset=UTF-8");
    	String filename = "项目名称信息表.xls";// 设置下载时客户端Excel的名称
    	//设置HTTP响应的头
    	String t = request.getHeader("User-Agent");
		if (t.indexOf("Firefox") > 0) {
			response.setHeader("Content-disposition", "attachment;filename="
					+ new String(filename.getBytes("gb2312"), "ISO8859-1"));
		} else {
			response.setHeader("Content-disposition", "attachment;filename="
					+ URLEncoder.encode(filename, "UTF-8"));
		}

    	ServletOutputStream stream = response.getOutputStream();

    	//创建工作薄
    	HSSFWorkbook workbook = new HSSFWorkbook();
    	//创建工作标签页(sheet)
    	HSSFSheet sheet = workbook.createSheet("项目名称表");

    	//创建表头
    	HSSFRow row = sheet.createRow(0);

    	HSSFCell cell = row.createCell(0);
    	cell.setCellValue("序号");

    	HSSFCell cell2 = row.createCell(1);
    	cell2.setCellValue("编号");


    	HSSFCell cell3 = row.createCell(2);
    	cell3.setCellValue("项目名称");


    	HSSFCell cell4 = row.createCell(3);
    	cell4.setCellValue("投资分类");
    	
    	HSSFCell cell5 = row.createCell(4);
    	cell5.setCellValue("备注");
    	
    	//创建数据行
    	for(int i = 0;i<projectNameList.size();i++) {
    		
    		Map map = (Map) projectNameList.get(i); 
    		/*Iterator entries = map.entrySet().iterator(); 
    		while (entries.hasNext()) { 
    		  Map.Entry entry = (Map.Entry) entries.next(); 
    		  Integer value = (Integer)entry.getValue(); 
    		}*/
    		
    		HSSFRow newrow = sheet.createRow(i+1);
        	newrow.createCell(0).setCellValue(i+1);
        	
    		
        	newrow.createCell(1).setCellValue(map.get("id").toString());
        	newrow.createCell(2).setCellValue(map.get("projectname").toString());
        	newrow.createCell(3).setCellValue(map.get("investmenttypeid").toString());
        	newrow.createCell(4).setCellValue(map.get("remark").toString());
    	}
    	
    	workbook.write(stream);

    	stream.close();
    }
}
