package com.newhero.urbanconstruction.apply.controller;

import java.io.IOException;
import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.junit.runners.Parameterized.Parameter;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.newhero.urbanconstruction.apply.pojo.AppropriationApply;
import com.newhero.urbanconstruction.apply.pojo.SegmentProjectReviewDTO;
import com.newhero.urbanconstruction.apply.service.AppropriationApplyService;
import com.newhero.urbanconstruction.apply.service.AppropriationApprovalService;
import com.newhero.urbanconstruction.codetablemaintain.archivesmanage.service.ArchivesMnageService;
import com.newhero.urbanconstruction.codetablemaintain.archivestype.pojo.ArchivesType;
import com.newhero.urbanconstruction.codetablemaintain.projectname.pojo.ProjectNameDTO;
import com.newhero.urbanconstruction.codetablemaintain.projectyear.pojo.ProjectYearDTO;
import com.newhero.urbanconstruction.codetablemaintain.unitaccount.pojo.UnitAccountDTO;
import com.newhero.urbanconstruction.codetablemaintain.unitinfo.pojo.UnitInfoDTO;
import com.newhero.urbanconstruction.common.SupportAction;
import com.newhero.urbanconstruction.sysmanager.user.pojo.UserDTO;
import com.newhero.urbanconstruction.util.BaseQueryVo;
import com.newhero.urbanconstruction.util.Constant;
import com.newhero.urbanconstruction.util.Pagination;
import com.newhero.urbanconstruction.util.ToolsUtil;

import net.sf.json.JSONObject;

@Controller
@RequestMapping("/appropriationApplyController")
public class AppropriationApplyController extends SupportAction{
	@Resource
	private AppropriationApplyService appropriationApplyService;
	
	@Resource
	private AppropriationApprovalService appropriationApprovalService;
	
	@Resource 
	private ArchivesMnageService archivesMnageService;
	
	@RequestMapping("/getApplyDataById")
	@ResponseBody
	public AppropriationApply getApplyDataById(String id){
		AppropriationApply appropriationApply =appropriationApplyService.getApplyDataById(Integer.valueOf(id));
		return appropriationApply;
	}
	
	
	//private ProjectYearDao aD = null;
	//返回自己的页面，跳过拦截器
	@RequestMapping("/returnApplyPage")
	public String returnPage(Model model){
		//List<ProjectYearDTO> yearList = null;
	    //model.addAttribute("yearList",yearList);
		return "appropriationapply/ApplyForFunding";
	}
	
	@RequestMapping("/showBootstraptableOfApplyData")
	public String getApplyData(String pn,String rowsPerPage, String keyword,HttpServletResponse response,HttpServletRequest request,Model model) throws IOException{
		if(ToolsUtil.isEmpty(pn)){
			pn = Constant.DEAULT_START_PAGE_NUM ;
		}
		if(ToolsUtil.isEmpty(rowsPerPage)){
			rowsPerPage = Constant.DEFAULT_PAGE_SIZE ;
		}
		if(ToolsUtil.isEmpty(keyword)) keyword = null;
		// 分页信息
		Pagination page = new Pagination();
		//翻页、参数
		BaseQueryVo dto = new BaseQueryVo();
		
		dto.setKeyword(keyword);
		dto.setStartRow((Integer.parseInt(pn) - 1) * Integer.parseInt(rowsPerPage));
		dto.setPageSize(Integer.parseInt(rowsPerPage));
		int rowsCount = appropriationApplyService.selectApplyCountByKeyword(dto);
		
		page.setRowsCount(rowsCount);
		page.setRowsPerPage(Integer.parseInt(rowsPerPage));
		page.setCurrentPage(Integer.parseInt(pn));
		page.setUrl(request.getContextPath()+"/appropriationApplyController/showBootstraptableOfApplyData?rowsPerPage="+rowsPerPage);
		
		List<AppropriationApply> applylist=appropriationApplyService.getApplyAllData(dto);
		if(applylist.isEmpty()&&Integer.parseInt(pn)>1) {
			dto.setStartRow((Integer.parseInt(pn) - 2) * Integer.parseInt(rowsPerPage));
			applylist=appropriationApplyService.getApplyAllData(dto);
			page.setCurrentPage(Integer.parseInt(pn)-1);
		
		}
		List<ArchivesType> archivesTypeList = archivesMnageService.selectArchivesType();
		List<ProjectNameDTO> projectNameList = archivesMnageService.selectProjectNames();
		List<ProjectYearDTO> projectYearList = archivesMnageService.selectProjectYears();
		model.addAttribute("archivesTypeList",archivesTypeList);
		model.addAttribute("projectNameList",projectNameList);
		model.addAttribute("projectYearList",projectYearList);
		model.addAttribute("applylist", applylist);
		model.addAttribute("keyword",keyword);
		model.addAttribute("page",page);
        return "appropriationapply/ApplyForFunding";
	} 
	@RequestMapping("/showBootstraptableOfApplyData1")
	@ResponseBody
	public List<AppropriationApply> getApplyData1(String keyword,HttpServletResponse response,HttpServletRequest request,Model model) throws IOException{
//		if(ToolsUtil.isEmpty(pn)){
//			pn = Constant.DEAULT_START_PAGE_NUM ;
//		}
//		if(ToolsUtil.isEmpty(rowsPerPage)){
//			rowsPerPage = Constant.DEFAULT_PAGE_SIZE ;
//		}
//		if(ToolsUtil.isEmpty(pn)) keyword = null;
		// 分页信息
		Pagination page = new Pagination();
		//翻页、参数
		BaseQueryVo dto = new BaseQueryVo();
		
		dto.setKeyword(keyword);
//		dto.setStartRow((Integer.parseInt(pn) - 1) * Integer.parseInt(rowsPerPage));
//		dto.setPageSize(Integer.parseInt(rowsPerPage));
		int rowsCount = appropriationApplyService.selectApplyCountByKeyword(dto);
		
		page.setRowsCount(rowsCount);
//		page.setRowsPerPage(Integer.parseInt(rowsPerPage));
//		page.setCurrentPage(Integer.parseInt(pn));
//		page.setUrl(request.getContextPath()+"/appropriationApplyController/showBootstraptableOfApplyData?rowsPerPage="+rowsPerPage);
		
		List<AppropriationApply> applylist=appropriationApplyService.getApplyAllData1(dto);
//		model.addAttribute("applylist", applylist);
//		model.addAttribute("keyword",keyword);
//		model.addAttribute("page",page);
        return  applylist; //"appropriationapply/ApplyForFunding";
	} 
	
	@RequestMapping("/addApplyData")
	public void insertApplyData(HttpServletRequest request,HttpServletResponse response,AppropriationApply appropriationApply) throws IOException{
		UserDTO user=(UserDTO)this.getUser(request, response);
		appropriationApply.setOperatorId(user.getId());
		int i = appropriationApplyService.insertApplyData(appropriationApply);
		Map<String, Object> rt = new HashMap<String, Object>();
		if(i>0) {
			rt.put("success", true);
		}else {
			rt.put("success", false);
		}
    	
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
	//修改申请拨款信息
	@RequestMapping("/updateApplyData")
	public void updateAppropriationApplyData(HttpServletRequest request,HttpServletResponse response,AppropriationApply appropriationApply) throws IOException{
		UserDTO user=(UserDTO)this.getUser(request, response);
		appropriationApply.setOperatorId(user.getId());
		int i = appropriationApplyService.updateAppropriationApplyData(appropriationApply);
		Map<String, Object> rt = new HashMap<String, Object>();
		if(i>0) {
			rt.put("success", true);
		}else {
			rt.put("success", false);
		}
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	//修改申请拨款信息业务流程状态
	@RequestMapping("/updateApplyDataState")
	@ResponseBody
	public int updateAppropriationApplyDateStateById(String id){
		System.out.println(id);
		int i = appropriationApplyService.updateAppropriationApplyDataStateById(id);
		return i;
	}
	
	@RequestMapping("/deleteApplyData")
	public void deleteAppropriationApplyById(HttpServletRequest request,HttpServletResponse response,AppropriationApply appropriationApply) throws IOException{
		UserDTO user=(UserDTO)this.getUser(request, response);
		appropriationApply.setOperatorId(user.getId());
		int i = appropriationApplyService.deleteAppropriationApplyById(appropriationApply);
		Map<String, Object> rt = new HashMap<String, Object>();
		rt.put("success", true);
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	@ResponseBody
	@RequestMapping("/selectSegmentProjectBySegmentId")
	public SegmentProjectReviewDTO selectSegmentProjectBySegmentId(String segmentinfoid,Model model) {
		SegmentProjectReviewDTO segmentProjectReviewDTO=appropriationApplyService.selectSegmentProjectBySegmentId(segmentinfoid);
		return  segmentProjectReviewDTO;
	}
	
	 
	@RequestMapping("/updateProjectPrceBySegmentId")
	@ResponseBody
	public void updateProjectPrceBySegmentId(HttpServletRequest request,HttpServletResponse response,SegmentProjectReviewDTO segmentProjectReviewDTO) throws IOException {
		UserDTO user=(UserDTO)this.getUser(request, response);
		segmentProjectReviewDTO.setOperatorid(user.getId());
		int i = appropriationApplyService.updateProjectPrceBySegmentId(segmentProjectReviewDTO);
		Map<String, Object> rt = new HashMap<String, Object>();
		if(i>0) {
			rt.put("success", true);
		}else {
			rt.put("success", false);
		}
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
	@RequestMapping("/updateReviewBySegmentId")
	@ResponseBody
	public void updateReviewBySegmentId(HttpServletRequest request,HttpServletResponse response,SegmentProjectReviewDTO segmentProjectReviewDTO) throws IOException {
		UserDTO user=(UserDTO)this.getUser(request, response);
		segmentProjectReviewDTO.setOperatorid(user.getId());
		int i = appropriationApplyService.updateReviewBySegmentId(segmentProjectReviewDTO);
		/*Double settlreviewamount =segmentProjectReviewDTO.getSettlreviewamount();
		Integer segmentinfoid=segmentProjectReviewDTO.getSegmentinfoid();
		Integer operatorid=user.getId();
		Map map=new HashMap();
		map.put("segmentinfoid", segmentinfoid);
		map.put("approvalamount", settlreviewamount);
		map.put("operatorid", operatorid);
		int j=appropriationApplyService.updateApplysettlreviewamount(map);*/
		Map<String, Object> rt = new HashMap<String, Object>();
		if(i>0) {
			rt.put("success", true);
		}else {
			rt.put("success", false);
		}
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
	@RequestMapping("/updateRemarkBySegmentId")
	@ResponseBody
	public void updateRemarkBySegmentId(HttpServletRequest request,HttpServletResponse response,SegmentProjectReviewDTO segmentProjectReviewDTO) throws IOException {
		UserDTO user=(UserDTO)this.getUser(request, response);
		segmentProjectReviewDTO.setOperatorid(user.getId());
		int i = appropriationApplyService.updateRemarkBySegmentId(segmentProjectReviewDTO);
		Map<String, Object> rt = new HashMap<String, Object>();
		if(i>0) {
			rt.put("success", true);
		}else {
			rt.put("success", false);
		}
		JSONObject object = JSONObject.fromObject(rt);
		String res = object.toString();
		response.getWriter().write(res);
	}
	
	@RequestMapping(value="/getPayeeListByName")
	@ResponseBody
	public List<UnitInfoDTO> getPayeeListByName(@RequestParam(value="unitname") String unitname) throws IOException{
		if(ToolsUtil.isEmpty(unitname)) unitname = null;
		List<UnitInfoDTO> list=appropriationApplyService.getPayeeListByName(unitname);
		return list;
	}
	@RequestMapping("getReceivableaccount")
	@ResponseBody
	public List<UnitAccountDTO> getReceivableaccount(@RequestParam(value="unitinfoid") String unitinfoid) {
		List<UnitAccountDTO> list=appropriationApplyService.getReceivableaccount(unitinfoid);
		return list;
	}
	
	/*public List<BaseDeptModel> getMenuTree(HttpServletRequest request){
		
		List<BaseDeptModel> list = this.baseUserService.getMenu();
		List<BaseDeptModel> vo = new ArrayList<>();
		Iterator<BaseDeptModel> iterator = list.iterator();
		while(iterator.hasNext()){
			BaseDeptModel dept = iterator.next();
			if(dept.getParentid().equals("0")){
				dept.setChildren(getChildrenBypId(list,dept.getId()));
				vo.add(dept);
				//System.out.println(dept);
			}
		}
		return vo;
	}

	private List<BaseDeptModel> getChildrenBypId(List<BaseDeptModel> list, String id) {
		List<BaseDeptModel> children = new ArrayList<>();
		Iterator<BaseDeptModel> iterator = list.iterator();
		while(iterator.hasNext()){
			BaseDeptModel dept = iterator.next();
			if(dept.getParentid().equals(id)){
				dept.setChildren(getChildrenBypId(list, dept.getId()));
				children.add(dept);
				//System.out.println(dept);
			}
		}
		return children;
	}*/
	
	@RequestMapping(value = "/exportApply")
	public void exportApply(HttpServletResponse response, HttpServletRequest request) throws Exception{
		BaseQueryVo dto = new BaseQueryVo();
		dto.setIsall(1);
		
		List<AppropriationApply> list = appropriationApplyService.getApplyAllData(dto);
		
		//设置输出头
    	response.setContentType("application/vnd.ms-excel;charset=UTF-8");
    	String filename = "申请拨款表.xls";// 设置下载时客户端Excel的名称
    	//设置HTTP响应的头
    	String t = request.getHeader("User-Agent");
		if (t.indexOf("Firefox") > 0) {
			response.setHeader("Content-disposition", "attachment;filename="
					+ new String(filename.getBytes("gb2312"), "ISO8859-1"));
		} else {
			response.setHeader("Content-disposition", "attachment;filename="
					+ URLEncoder.encode(filename, "UTF-8"));
		}
		
		ServletOutputStream stream = response.getOutputStream();
		
		HSSFWorkbook work = new HSSFWorkbook();
		
		HSSFSheet sheet = work.createSheet("申请拨款");
		
		HSSFRow row = sheet.createRow(0);
		
		HSSFCell cell1 = row.createCell(0);
		cell1.setCellValue("序号");
		
		HSSFCell cell2 = row.createCell(1);
		cell2.setCellValue("编号");
		
		HSSFCell cell3 = row.createCell(2);
		cell3.setCellValue("申请日期");
		
		HSSFCell cell4 = row.createCell(3);
		cell4.setCellValue("申请金额（元）");
		
		HSSFCell cell5 = row.createCell(4);
		cell5.setCellValue("收款单位");
		
		HSSFCell cell6 = row.createCell(5);
		cell6.setCellValue("审批金额（元）");
		
		HSSFCell cell7 = row.createCell(6);
		cell7.setCellValue("拨款账户");
		
		HSSFCell cell8 = row.createCell(7);
		cell8.setCellValue("拨款日期");
		
		HSSFCell cell9 = row.createCell(8);
		cell9.setCellValue("状态");
		
		List<Date> listGrantTime = appropriationApprovalService.getGrantDate();
		List<String> listAppropriationAccount = appropriationApprovalService.getAppropriationAccount();
		
		for(int i = 0; i < list.size(); i++){
			System.out.println(list.get(i));
			Map apply = (Map) list.get(i);
			HSSFRow row1 = sheet.createRow(i + 1);
			row1.createCell(0).setCellValue(i + 1);
			row1.createCell(1).setCellValue(apply.get("id").toString());
			if(apply.get("applicationDate") != null){
				row1.createCell(2).setCellValue(apply.get("applicationDate").toString());
			}
			if(apply.get("applicationAmount") != null){
				row1.createCell(3).setCellValue(apply.get("applicationAmount").toString());
			}
			row1.createCell(4).setCellValue(apply.get("payee").toString());
			if(apply.get("approvalamount") != null){
				row1.createCell(5).setCellValue(apply.get("approvalamount").toString());
			}
			
			row1.createCell(6).setCellValue(listAppropriationAccount.get(i));//拨款账户有错
			if(apply.get("grantTime") != null){
				//row1.createCell(6).setCellValue(listGrantTime.get(i).getDate());//拨款日期
				row1.createCell(7).setCellValue(apply.get("grantTime").toString());
			}
			
			row1.createCell(8).setCellValue(apply.get("state").toString());
		}
		
		work.write(stream);
		
		stream.flush();
		stream.close();
	}
	
	
}
